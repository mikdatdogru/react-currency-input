{"version":3,"file":"md-react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","Object.assign = Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n","import './object-assign-polyfill';\n\nimport PropTypes from 'prop-types';\nimport React, { Component }  from 'react'\nimport ReactDOM from 'react-dom'\nimport mask from './mask.js'\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n  constructor(props) {\n    super(props);\n    this.prepareProps = this.prepareProps.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.state = this.prepareProps(this.props);\n\n    this.inputSelectionStart = 1;\n    this.inputSelectionEnd = 1;\n  }\n\n\n  /**\n   * Exposes the current masked value.\n   *\n   * @returns {String}\n   */\n  getMaskedValue() {\n    return this.state.maskedValue;\n  }\n\n\n  /**\n   * General function used to cleanup and define the final props used for rendering\n   * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n   */\n  prepareProps(props) {\n    let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\n    delete customProps.onChange;\n    delete customProps.onChangeEvent;\n    delete customProps.value;\n    delete customProps.decimalSeparator;\n    delete customProps.thousandSeparator;\n    delete customProps.precision;\n    delete customProps.inputType;\n    delete customProps.allowNegative;\n    delete customProps.allowEmpty;\n    delete customProps.prefix;\n    delete customProps.suffix;\n    delete customProps.selectAllOnFocus;\n\n    let initialValue = props.value;\n    if (initialValue === null) {\n      initialValue = props.allowEmpty? null : '';\n    }else{\n\n      if (typeof initialValue == 'string') {\n        // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n        // Now they have two problems.\n\n        // Strip out thousand separators, prefix, and suffix, etc.\n        if (props.thousandSeparator === \".\"){\n          // special handle the . thousand separator\n          initialValue = initialValue.replace(/\\./g, '');\n        }\n\n        if (props.decimalSeparator != \".\"){\n          // fix the decimal separator\n          initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n        }\n\n        //Strip out anything that is not a digit, -, or decimal separator\n        initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n        // now we can parse.\n        initialValue = Number.parseFloat(initialValue);\n      }\n      initialValue = Number(initialValue).toLocaleString(undefined, {\n        style                : 'decimal',\n        minimumFractionDigits: props.precision,\n        maximumFractionDigits: props.precision\n      })\n\n    }\n\n    const { maskedValue, value } = mask(\n      initialValue,\n      props.precision,\n      props.decimalSeparator,\n      props.thousandSeparator,\n      props.allowNegative,\n      props.prefix,\n      props.suffix\n    );\n\n    return { maskedValue, value, customProps };\n  }\n\n\n  /**\n   * Component lifecycle function.\n   * Invoked when a component is receiving new props. This method is not called for the initial render.\n   *\n   * @param nextProps\n   * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState(this.prepareProps(nextProps));\n  }\n\n\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n   */\n/*  componentDidMount(){\n    let node = ReactDOM.findDOMNode(this.theInput);\n\n    let selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n    let selectionStart = Math.min(node.selectionStart, selectionEnd);\n    //console.log(\"normal\", selectionStart, selectionEnd);\n    node.setSelectionRange(selectionStart, selectionEnd);\n\n  }*/\n\n\n  /**\n   * Component lifecycle function\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n   */\n  componentWillUpdate() {\n    let node = ReactDOM.findDOMNode(this.theInput);\n    this.inputSelectionStart = node.selectionStart;\n    this.inputSelectionEnd = node.selectionEnd;\n  }\n\n\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n   */\n/*  componentDidUpdate(prevProps, prevState){\n\n    let node = ReactDOM.findDOMNode(this.theInput);\n    let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n    let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n    let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n    let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n    let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n    let separatorsRegex = new RegExp(this.props.decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n    let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n    let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n    let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n    selectionEnd = selectionEnd + adjustment;\n    selectionStart = selectionStart + adjustment;\n\n    let baselength = this.props.suffix.length\n      + this.props.prefix.length\n      + this.props.decimalSeparator.length\n      + Number(this.props.precision)\n      + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n    if (this.state.maskedValue.length == baselength){\n      // if we are already at base length, position the cursor at the end.\n      selectionEnd = this.theInput.value.length - this.props.suffix.length;\n      selectionStart = selectionEnd;\n    }\n\n    node.setSelectionRange(selectionStart, selectionEnd);\n    this.inputSelectionStart = selectionStart;\n    this.inputSelectionEnd = selectionEnd;\n  }*/\n\n\n  /**\n   * onChange Event Handler\n   * @param event\n   */\n  handleChange(event) {\n    event.preventDefault();\n    let { maskedValue, value } = mask(\n      event.target.value,\n      this.props.precision,\n      this.props.decimalSeparator,\n      this.props.thousandSeparator,\n      this.props.allowNegative,\n      this.props.prefix,\n      this.props.suffix\n    );\n\n    event.persist();  // fixes issue #23\n\n    this.setState({ maskedValue, value }, () => {\n      this.props.onChange(maskedValue, value, event);\n      this.props.onChangeEvent(event, maskedValue, value);\n    });\n  }\n\n\n  /**\n   * onFocus Event Handler\n   * @param event\n   */\n  handleFocus(event) {\n    if (!this.theInput) return;\n\n    //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n    let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n    let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n    let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n    this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n    this.inputSelectionStart = selectionStart;\n    this.inputSelectionEnd = selectionEnd;\n  }\n\n\n  handleBlur(event) {\n    this.inputSelectionStart = 0;\n    this.inputSelectionEnd = 0;\n  }\n\n\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/component-specs.html#render\n   */\n  render() {\n    return (\n      <input\n        ref={(input) => { this.theInput = input; }}\n        type={this.props.inputType}\n        value={this.state.maskedValue}\n        onChange={this.handleChange}\n        onFocus={this.handleFocus}\n        onMouseUp={this.handleFocus}\n        {...this.state.customProps}\n      />\n    )\n  }\n}\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  decimalSeparator: PropTypes.string,\n  thousandSeparator: PropTypes.string,\n  precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  inputType: PropTypes.string,\n  allowNegative: PropTypes.bool,\n  allowEmpty: PropTypes.bool,\n  prefix: PropTypes.string,\n  suffix: PropTypes.string,\n  selectAllOnFocus: PropTypes.bool\n};\n\n\nCurrencyInput.defaultProps = {\n  onChange: function(maskValue, value, event) {/*no-op*/},\n  onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n  value: '0',\n  decimalSeparator: '.',\n  thousandSeparator: ',',\n  precision: '2',\n  inputType: 'text',\n  allowNegative: false,\n  prefix: '',\n  suffix: '',\n  selectAllOnFocus: false\n};\n\n\nexport default CurrencyInput\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","undefined","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","initialValue","replace","RegExp","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentWillUpdate","node","ReactDOM","findDOMNode","theInput","selectionStart","selectionEnd","event","preventDefault","persist","isNegative","setSelectionRange","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}